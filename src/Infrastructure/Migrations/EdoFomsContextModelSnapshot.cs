// <auto-generated />
using System;
using EDO_FOMS.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EDO_FOMS.Infrastructure.Migrations
{
    [DbContext(typeof(EdoFomsContext))]
    partial class EdoFomsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EDO_FOMS.Application.Models.Chat.ChatHistory<EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromUserId")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("ToUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("ChatHistory", "sys");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("AO")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("Changed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("Fax")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HeadLastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HeadMidName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HeadName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HotLine")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Inn")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("Kpp")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Ogrn")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SiteUrl")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("TfOkato")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("Inn");

                    b.HasIndex("TfOkato");

                    b.ToTable("Companies", "dir");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Icon")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NameEn")
                        .HasColumnType("text");

                    b.Property<int?>("RouteId")
                        .HasColumnType("integer");

                    b.Property<string>("Short")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("DocumentTypes", "dir");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowRevocation")
                        .HasColumnType("boolean");

                    b.Property<bool>("AttachedSign")
                        .HasColumnType("boolean");

                    b.Property<bool>("CalcHash")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("DisplayedSign")
                        .HasColumnType("boolean");

                    b.Property<int>("EndAction")
                        .HasColumnType("integer");

                    b.Property<int[]>("ForOrgTypes")
                        .HasColumnType("integer[]");

                    b.Property<int>("ForUserRole")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPackage")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("UseVersioning")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("RouteStageSteps", "dir");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.RouteStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActType")
                        .HasColumnType("integer");

                    b.Property<bool>("AllRequred")
                        .HasColumnType("boolean");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DenyRevocation")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("InSeries")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int?>("RouteId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("Validity")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.ToTable("RouteStages");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.RouteStageStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActType")
                        .HasColumnType("integer");

                    b.Property<bool>("AllRequred")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasAgreement")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasReview")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<bool>("OnlyHead")
                        .HasColumnType("boolean");

                    b.Property<int>("OrgType")
                        .HasColumnType("integer");

                    b.Property<bool>("Requred")
                        .HasColumnType("boolean");

                    b.Property<int?>("RouteStageId")
                        .HasColumnType("integer");

                    b.Property<bool>("SomeParticipants")
                        .HasColumnType("boolean");

                    b.Property<int>("StageNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RouteStageId");

                    b.ToTable("RouteStageSteps");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Doc.Agreement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Answered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CertId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<string>("EmplId")
                        .HasColumnType("text");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Opened")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrgId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Received")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("SignURL")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Step")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("OrgId");

                    b.ToTable("Agreements", "doc");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Doc.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CurrentStep")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmplId")
                        .HasColumnType("text");

                    b.Property<int>("EmplOrgId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<bool>("HasChanges")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousId")
                        .HasColumnType("integer");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<string>("StoragePath")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("TotalSteps")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmplOrgId");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("Documents", "doc");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Doc.DocumentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentStatuses", "doc");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.ExtendedAttributes.DocumentExtendedAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Decimal")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Json")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.ToTable("DocumentExtendedAttributes", "doc");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Org.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Algorithm")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuerInn")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OpenKey")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("SignAllowed")
                        .HasColumnType("boolean");

                    b.Property<string>("Snils")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Thumbprint")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<DateTime>("TillDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Certificates", "org");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Org.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Ogrn")
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Inn");

                    b.ToTable("Organizations", "org");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Public.Subscribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Subscribes", "sys");
                });

            modelBuilder.Entity("EDO_FOMS.Infrastructure.Models.Audit.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NewValues")
                        .HasColumnType("text");

                    b.Property<string>("OldValues")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("text");

                    b.Property<string>("TableName")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails", "sys");
                });

            modelBuilder.Entity("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "identity");
                });

            modelBuilder.Entity("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "identity");
                });

            modelBuilder.Entity("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("BaseRole")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("GivenName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Inn")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)");

                    b.Property<string>("InnLe")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("OrgId")
                        .HasColumnType("integer");

                    b.Property<int>("OrgType")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureDataUrl")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Snils")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("Surname")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OrgId");

                    b.ToTable("Users", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "identity");
                });

            modelBuilder.Entity("EDO_FOMS.Application.Models.Chat.ChatHistory<EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser>", b =>
                {
                    b.HasOne("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser", "FromUser")
                        .WithMany("ChatHistoryFromUsers")
                        .HasForeignKey("FromUserId");

                    b.HasOne("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser", "ToUser")
                        .WithMany("ChatHistoryToUsers")
                        .HasForeignKey("ToUserId");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.DocumentType", b =>
                {
                    b.HasOne("EDO_FOMS.Domain.Entities.Dir.Route", null)
                        .WithMany("DocTypes")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.RouteStage", b =>
                {
                    b.HasOne("EDO_FOMS.Domain.Entities.Dir.Route", null)
                        .WithMany("Stages")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.RouteStageStep", b =>
                {
                    b.HasOne("EDO_FOMS.Domain.Entities.Dir.RouteStage", null)
                        .WithMany("Steps")
                        .HasForeignKey("RouteStageId");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Doc.Agreement", b =>
                {
                    b.HasOne("EDO_FOMS.Domain.Entities.Doc.Document", "Document")
                        .WithMany("Agreements")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDO_FOMS.Domain.Entities.Org.Organization", "Org")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Org");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Doc.Document", b =>
                {
                    b.HasOne("EDO_FOMS.Domain.Entities.Org.Organization", "Issuer")
                        .WithMany()
                        .HasForeignKey("EmplOrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDO_FOMS.Domain.Entities.Doc.Document", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("EDO_FOMS.Domain.Entities.Dir.DocumentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issuer");

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.ExtendedAttributes.DocumentExtendedAttribute", b =>
                {
                    b.HasOne("EDO_FOMS.Domain.Entities.Doc.Document", "Entity")
                        .WithMany("ExtendedAttributes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Public.Subscribe", b =>
                {
                    b.OwnsOne("EDO_FOMS.Domain.Entities.Public.Notify", "Chat", b1 =>
                        {
                            b1.Property<int>("SubscribeId")
                                .HasColumnType("integer");

                            b1.Property<bool>("AgreementAgreed")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementApproved")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementIncoming")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementRejected")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementSigned")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentAgreed")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentApproved")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentRejected")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentSigned")
                                .HasColumnType("boolean");

                            b1.HasKey("SubscribeId");

                            b1.ToTable("Subscribes", "sys");

                            b1.WithOwner()
                                .HasForeignKey("SubscribeId");
                        });

                    b.OwnsOne("EDO_FOMS.Domain.Entities.Public.Notify", "Email", b1 =>
                        {
                            b1.Property<int>("SubscribeId")
                                .HasColumnType("integer");

                            b1.Property<bool>("AgreementAgreed")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementApproved")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementIncoming")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementRejected")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementSigned")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentAgreed")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentApproved")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentRejected")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentSigned")
                                .HasColumnType("boolean");

                            b1.HasKey("SubscribeId");

                            b1.ToTable("Subscribes", "sys");

                            b1.WithOwner()
                                .HasForeignKey("SubscribeId");
                        });

                    b.OwnsOne("EDO_FOMS.Domain.Entities.Public.Notify", "Sms", b1 =>
                        {
                            b1.Property<int>("SubscribeId")
                                .HasColumnType("integer");

                            b1.Property<bool>("AgreementAgreed")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementApproved")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementIncoming")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementRejected")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementSigned")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentAgreed")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentApproved")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentRejected")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentSigned")
                                .HasColumnType("boolean");

                            b1.HasKey("SubscribeId");

                            b1.ToTable("Subscribes", "sys");

                            b1.WithOwner()
                                .HasForeignKey("SubscribeId");
                        });

                    b.OwnsOne("EDO_FOMS.Domain.Entities.Public.Notify", "Telegram", b1 =>
                        {
                            b1.Property<int>("SubscribeId")
                                .HasColumnType("integer");

                            b1.Property<bool>("AgreementAgreed")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementApproved")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementIncoming")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementRejected")
                                .HasColumnType("boolean");

                            b1.Property<bool>("AgreementSigned")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentAgreed")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentApproved")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentRejected")
                                .HasColumnType("boolean");

                            b1.Property<bool>("DocumentSigned")
                                .HasColumnType("boolean");

                            b1.HasKey("SubscribeId");

                            b1.ToTable("Subscribes", "sys");

                            b1.WithOwner()
                                .HasForeignKey("SubscribeId");
                        });

                    b.Navigation("Chat");

                    b.Navigation("Email");

                    b.Navigation("Sms");

                    b.Navigation("Telegram");
                });

            modelBuilder.Entity("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsRoleClaim", b =>
                {
                    b.HasOne("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.Route", b =>
                {
                    b.Navigation("DocTypes");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Dir.RouteStage", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("EDO_FOMS.Domain.Entities.Doc.Document", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("ExtendedAttributes");
                });

            modelBuilder.Entity("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("EDO_FOMS.Infrastructure.Models.Identity.EdoFomsUser", b =>
                {
                    b.Navigation("ChatHistoryFromUsers");

                    b.Navigation("ChatHistoryToUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
