@using EDO_FOMS.Application.Features.Directories.Commands
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations

@namespace EDO_FOMS.Client.Pages.Dirs

@inject Microsoft.Extensions.Localization.IStringLocalizer<RouteDialog> _localizer

<MudDialog Style="background-color: var(--mud-palette-background-grey);">
    <TitleContent>
        @if (_route.Id == 0)
        {
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Outlined.Queue" Class="mr-3 mb-n1" />
                @_localizer["New route"]
            </MudText>
        }
        else
        {
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Outlined.Map" Class="mr-3 mb-n1" />
                @_localizer["Update route"]
            </MudText>
        }
    </TitleContent>

    <DialogContent>
        @if (page == 1)
        {
            <MudGrid Style="max-height: 70vh; overflow-y: scroll;">
                <MudItem xs="6">
                    <MudTextField For="@(() => _route.Name)" @bind-Value="_route.Name" Label="@_localizer["Name"]" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField For="@(() => _route.Name)" @bind-Value="_route.Name" Label="@_localizer["Description"]" />
                </MudItem>

                <MudItem xs="6">
                    <MudTextField For="@(() => _route.Description)" @bind-Value="_route.Description" Label="@_localizer["Document Types"]" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField For="@(() => _route.Description)" @bind-Value="_route.Description" Label="@_localizer["Org Types"]" />
                </MudItem>

                <MudItem xs="6">
                    <MudTextField For="@(() => _route.Description)" @bind-Value="_route.Description" Label="@_localizer["User Role"]" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField For="@(() => _route.Description)" @bind-Value="_route.Description" Label="@_localizer["End Action"]" />
                </MudItem>

                <MudItem xs="3">
                    <MudSwitch @bind-Checked="@_route.IsPackage" Label="@_localizer["Package"]" Color="Color.Primary" />
                </MudItem>
                <MudItem xs="3">
                    <MudSwitch @bind-Checked="@_route.CalcHash" Label="@_localizer["Calculate hash"]" Color="Color.Primary" />
                </MudItem>

                <MudItem xs="3">
                    <MudSwitch @bind-Checked="@_route.AttachedSign" Label="@_localizer["Attached Sign"]" Color="Color.Primary" />
                </MudItem>
                <MudItem xs="3">
                    <MudSwitch @bind-Checked="@_route.DisplayedSign" Label="@_localizer["Displayed Sign"]" Color="Color.Primary" />
                </MudItem>
            </MudGrid>
        }
        else
        {
            @*
        <MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
        <ChildContent>
        @foreach (var item in _sections)
        {
        <MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
        <MudToolBar DisableGutters="true">
        <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
        <MudSpacer />
        <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
        <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Rounded.Edit">Rename Section</MudButton>
        </MudMenu>
        </MudToolBar>
        <MudDropZone T="KanbanTaskItem" Identifier="@item.Name" Class="mud-height-full" />
        @if (item.NewTaskOpen)
        {
        <MudPaper Elevation="25" Class="pa-2 rounded-lg">
        <MudTextField @bind-Value="item.NewTaskName" Placeholder="New Task" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
        <MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
        </MudPaper>
        }
        else
        {
        <MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
        }
        </MudPaper>
        }
        <MudPaper Class="pa-4" Elevation="0" Width="224px">
        @if (_addSectionOpen)
        {
        <MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
        <EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
        <DataAnnotationsValidator />
        <MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" DisableUnderLine="true"></MudTextField>
        <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton>
        </EditForm>
        </MudPaper>
        }
        else
        {
        <MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton>
        }
        </MudPaper>
        </ChildContent>
        <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Name</MudPaper>
        </ItemRenderer>
        </MudDropContainer>
        *@

            <MudPaper>
                <MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
                    <ChildContent>
                        <MudDropZone T="DropItem" Identifier="Drop Zone 1" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                            <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 1</MudText>
                        </MudDropZone>
                        <MudDropZone T="DropItem" Identifier="Drop Zone 2" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                            <MudText Typo="Typo.h6" Class="mb-4">Drop Zone 2</MudText>
                        </MudDropZone>
                    </ChildContent>
                    <ItemRenderer>
                        <MudPaper Elevation="25" Class="pa-4 my-4">@context.Name</MudPaper>
                    </ItemRenderer>
                </MudDropContainer>
            </MudPaper>
        }
    </DialogContent>

    <DialogActions>
        @if (page == 1)
        {
            <MudButton Variant="Variant.Outlined" OnClick="(() => CancelAsync())" FullWidth="true" Color="Color.Primary">
                @_localizer["Cancel"]
            </MudButton>
            <MudButton Variant="Variant.Filled" OnClick="(() => StagesPageAsync())" FullWidth="true" Color="Color.Primary">
                @_localizer["Stages"]
            </MudButton>
        }
        else if (page == 2)
        {
            <MudButton Variant="Variant.Outlined" OnClick="(() => CardPageAsync())" FullWidth="true" Color="Color.Primary">
                @_localizer["Card"]
            </MudButton>
            <MudButton Variant="Variant.Filled" OnClick="(() => SaveAsync())" FullWidth="true" Color="Color.Primary">
                @_localizer["Save"]
            </MudButton>
        }
    </DialogActions>

</MudDialog>


@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = "Drag me!", Identifier = "Drop Zone 1" },
        new DropItem(){ Name = "Or me!", Identifier = "Drop Zone 2" },
        new DropItem(){ Name = "Just Mud", Identifier = "Drop Zone 1" },
    };

    public class DropItem
    {
        public string Name { get; init; }
        public string Identifier { get; set; }
    }
}

@*@code {
	private MudDropContainer<KanbanTaskItem> _dropContainer;

	private bool _addSectionOpen;
	/* handling board events */
	private void TaskUpdated(MudItemDropInfo<KanbanTaskItem> info)
	{
		info.Item.Status = info.DropzoneIdentifier;
	}

	/* Setup for board  */
	private List<KanBanSections> _sections = new()
		{
			new KanBanSections("To Do", false, String.Empty),
			new KanBanSections("In Process", false, String.Empty),
			new KanBanSections("Done", false, String.Empty),
		};

	public class KanBanSections
	{
		public string Name { get; init; }
		public bool NewTaskOpen { get; set; }
		public string NewTaskName { get; set; }

		public KanBanSections(string name, bool newTaskOpen, string newTaskName)
		{
			Name = name;
			NewTaskOpen = newTaskOpen;
			NewTaskName = newTaskName;
		}
	}
	public class KanbanTaskItem
	{
		public string Name { get; init; }
		public string Status { get; set; }

		public KanbanTaskItem(string name, string status)
		{
			Name = name;
			Status = status;
		}
	}

	private List<KanbanTaskItem> _tasks = new()
		{
			new KanbanTaskItem("Write unit test", "To Do"),
			new KanbanTaskItem("Some docu stuff", "To Do"),
			new KanbanTaskItem("Walking the dog", "To Do"),
		};

	KanBanNewForm newSectionModel = new KanBanNewForm();

	public class KanBanNewForm
	{
		[Required]
		[StringLength(10, ErrorMessage = "Name length can't be more than 8.")]
		public string Name { get; set; }
	}

	private void OnValidSectionSubmit(EditContext context)
	{
		_sections.Add(new KanBanSections(newSectionModel.Name, false, String.Empty));
		newSectionModel.Name = string.Empty;
		_addSectionOpen = false;
	}

	private void OpenAddNewSection()
	{
		_addSectionOpen = true;
	}

	private void AddTask(KanBanSections section)
	{
		_tasks.Add(new KanbanTaskItem(section.NewTaskName, section.Name));
		section.NewTaskName = string.Empty;
		section.NewTaskOpen = false;
		_dropContainer.Refresh();
	}

	private void DeleteSection(KanBanSections section)
	{
		if (_sections.Count == 1)
		{
			_tasks.Clear();
			_sections.Clear();
		}
		else
		{
			int newIndex = _sections.IndexOf(section) - 1;
			if (newIndex < 0)
			{
				newIndex = 0;
			}

			_sections.Remove(section);

			var tasks = _tasks.Where(x => x.Status == section.Name);
			foreach (var item in tasks)
			{
				item.Status = _sections[newIndex].Name;
			}
		}
	}
}
*@